// For responsive design
@mixin screen($size, $pixels: $breakpoint-small) {
  @if $size == "small" {
    @media (max-width: #{$breakpoint-small}) {
      @content;
    }
  } @else if $size == "medium" {
    @media (min-width: #{$breakpoint-med}) {
      @content;
    }
  } @else if $size == "large" {
    @media (min-width: #{$breakpoint-large}) {
      @content;
    }
  } @else if $size == "x-large" {
    @media (min-width: #{$breakpoint-xlarge}) {
      @content;
    }
  } @else {
    @content;
  }
}

// For centering an element
@mixin center($position) {
  position: absolute;

  @if $position == "vertical" {
    top: 50%;
    transform: translateY(-50%);
  } @else if $position == "horizontal" {
    left: 50%;
    transform: translate(-50%);
  } @else if $position == "both" {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

// Usage @extend %clearfix;
%clearfix {
  *zoom: 1;
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// For retina, usage: @include image-2x("logo2x.png", 100px, 25px);
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}

// For gradients, usage: @include background-gradient(red, black, 'vertical');
@mixin background-gradient($start-color, $end-color, $orientation) {
  background: $start-color;

  @if $orientation == "vertical" {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == "horizontal" {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(
      center,
      ellipse cover,
      $start-color,
      $end-color
    );
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

// Including fonts, usage: @include font-face('gotham', '/fonts/gotham');
@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    src: url($file-name+".eot");
    src: url($file-name+".eot?#iefix") format("embedded-opentype"),
      url($file-name+".woff") format("woff"),
      url($file-name+".ttf") format("truetype"),
      url($file-name+".svg##{$font-name}") format("svg");
    font-weight: $weight;
    font-style: $style;
  }
}

//Padding mixin, usage: @include padding(1px, null, 3px, 4px);
@mixin padding($top, $right, $bottom, $left) {
  padding-top: $top;
  padding-right: $right;
  padding-bottom: $bottom;
  padding-left: $left;
}

//Margin mixin, usage: @include margin(1px, 2px, null, 4px);
@mixin margin($top, $right, $bottom, $left) {
  margin-top: $top;
  margin-right: $right;
  margin-bottom: $bottom;
  margin-left: $left;
}
